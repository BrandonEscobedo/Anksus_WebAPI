@page "/CrearCuestionario"
@inject IPreguntasService _preguntasService
@inject IDialogService DialogService
@inject IIdContainer _IdConteiner
@inject IRespuestasService _RespuestasService
<h2>Crear Cuestionario</h2>
<MudButton @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
    Guardar Cuestionario
</MudButton>
<div class="container-fluid m-0">
    <div class="row">
        <div class="col-md-2 bg-white custom-left-section p-3">

            @foreach (var pregunta in ListaPreguntas)
            {
                <div class="mt-3 añadirPreguntas">
                    <input type="button" class="form-control" @bind-value="pregunta.Pregunta" />
                    <button @onclick="() => EliminarPregunta(pregunta)">Eliminar</button>

                </div>
            }
            <div class="mt-3">
                <button id="addFunctionButton" @onclick="GuardarEditarPregunta" class="btn btn-primary mt-2">Agregar Pregunta</button>
            </div>
        </div>
    </div>
</div>
<div class="col-md-10 bg-white p-4">
    <h3>Escribe la pregunta</h3>
    <input type="text" @bind-value="preguntasDTO.Pregunta" class="form-control" placeholder="Pregunta">
    <label>Agregar Respuestas</label>

    <div class="mt-3">
        <div class="row">
            @foreach (RespuestasDTO respuestas in ListaRespuestasDTOs)
            {
                <div class="col-6">
                    <div class="input-group">
                        <input type="text" @bind-value="respuestas.respuesta" class=" form-control">
                        <input id="eye1" type="checkbox" class="form-check-input" />
                        <button @onclick="() => EliminarRespuesta(respuestas)">Eliminar</button>
                    </div>
                </div>
            }
        </div>
    </div>

</div>


<button @onclick="AgregarRespuesta">Agregar Respuesta</button>
<button @onclick="GuardarRespuestas">Guardar Respuesta</button>
@code {
    List<PreguntasDTO> ListaPreguntas { get; set; } = new List<PreguntasDTO>();
    List<RespuestasDTO> ListaRespuestasDTOs { get; set; } = new List<RespuestasDTO>();
    public PreguntasDTO preguntasDTO { get; set; } = new PreguntasDTO();
    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<MdCrearCuestionario>("Simple Dialog", options);
    }


    protected override async Task OnInitializedAsync()
    {
        _IdConteiner.idCuestionario = 0;
        _IdConteiner.idPregunta = 0;
        ListaRespuestasDTOs.Add(new RespuestasDTO
            {
                IdPregunta=75,
                respuesta = "Respuesta inicial",
                RCorrecta = false
            });

    }
    public async Task AgregarPreguntaLista(int id)
    {
        var pregunta = await _preguntasService.GetPreguntas(id);
        ListaPreguntas.Add(pregunta);

    }
    public async Task GuardarEditarPregunta()
    {
        preguntasDTO.IdCuestionario = _IdConteiner.idCuestionario;
        var idpregunta = await _preguntasService.CreatePregunta(preguntasDTO);
        if (idpregunta != 0)
        {
            _IdConteiner.SetIdPregunta(idpregunta);
            await AgregarPreguntaLista(idpregunta);
        }

    }
    public void EliminarRespuesta(RespuestasDTO respuesta)
    {
        ListaRespuestasDTOs.Remove(respuesta);
    }
    public async Task EliminarPregunta(PreguntasDTO pregunta)
    {
        var validacion = await _preguntasService.DeletePregunta(pregunta.IdPregunta);
        if (validacion != false)
        {
            ListaPreguntas.Remove(pregunta);
        }
    }
    public async Task AgregarRespuesta()
    {
        ListaRespuestasDTOs.Add(new RespuestasDTO
            {
                IdPregunta = 75,
                respuesta = "",
                RCorrecta = false
            });
    }
    public async Task CambiarID(int id)
    {
        foreach (var respuesta in ListaRespuestasDTOs)
        {
            respuesta.IdPregunta = id;       
        }
    }
    public async Task GuardarRespuestas()
    {
        await CambiarID(_IdConteiner.idPregunta);
        await _RespuestasService.CreateRespuestas(ListaRespuestasDTOs);

    }
}
