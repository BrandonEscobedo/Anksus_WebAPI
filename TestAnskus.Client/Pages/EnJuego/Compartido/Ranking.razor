 @page "/Ranking"
 @layout ComponentsBase.ComponentBaseLogin
<h3>Rankings de Jugadores</h3>
<style>
    li {
        background-color:blue;
        transition:all linear 2s
    }
    li:nth-child(2n){
        background-color: white;
    }
</style>
<ul>

    @foreach (var jugador in Jugadores.OrderByDescending(j => j.Puntaje))
    {        
        <li  >@jugador.Nombre: @jugador.Puntaje</li>
    }
</ul>

@code{
    @using System.Timers;
    private Timer Timer = new Timer(1000);
    private int segundos = 10;
    protected override async Task OnInitializedAsync()
    {
           Jugadores = new List<Jugador>
        {
            new Jugador { Nombre = "Jugador1", Puntaje = 100 },
            new Jugador { Nombre = "Jugador2", Puntaje = 90 },
            new Jugador { Nombre = "Jugador3", Puntaje = 80 },
            new Jugador { Nombre = "Jugador4", Puntaje = 70 }
        };
        await ActualizarPuntajes();

    }

    private List<Jugador> Jugadores { get; set; }
    private async Task ActualizarPuntajes()
    {
        while (true)
        {
            await Task.Delay(100); // Esperamos 2 segundos

            // Actualizamos los puntajes de los jugadores
            foreach (var jugador in Jugadores)
            {
                jugador.Puntaje += new Random().Next(1, 11);
                if (jugador.Puntaje >= 1000) break;
            }

            // Actualizamos la interfaz de usuario
            StateHasChanged();
        }
    }

    // Definimos la clase Jugador
    public class Jugador
    {
        public string Nombre { get; set; } = "";
        public int Puntaje { get; set; }
    }
}