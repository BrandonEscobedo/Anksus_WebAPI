 @page "/Ranking"
 @layout ComponentsBase.ComponentBaseLogin
 @inject IStateConteiner _stateContainer
<link rel="stylesheet" href="css/Preguntas.css" />
<section class="preguntas__body">
    <h2 class="title">
        Ranking de jugadores
    </h2>
    <div class="links">
        <h3>
            Tabla de Respuestas
        </h3>
        <h3>
            Tabla de Puntuacion
        </h3>
    </div>
    <div class="tablero">
        <div class="content__tablero" data-ida="w12">
            <h3>
                Posicion
            </h3>
            <h3>
                Jugador
            </h3>
            <h3>
                Puntuacion
            </h3>
        </div>
        @foreach (var jugador in Jugadores.OrderByDescending(j => j.Puntaje))
        {
            <div class="content__tablero">
                <h3>
                    No.
                </h3>
                <h3>
                    @jugador.Nombre
                </h3>
                <h3>
                    @jugador.Puntaje
                </h3>
            </div>
        }

    </div>

</section>
<ul>

</ul>
@foreach(var participante in _stateContainer.participanteEnCuest)
{
    <p>@participante.Nombre</p>
    <p>@participante.PuntosActuales</p>
}
@code{
    @using System.Timers;
    private Timer Timer = new Timer(1000);
    private int segundos = 10;
    protected override async Task OnInitializedAsync()
    {
           Jugadores = new List<Jugador>
        {
            new Jugador { Nombre = "Jugador1", Puntaje = 100 },
            new Jugador { Nombre = "Jugador2", Puntaje = 90 },
            new Jugador { Nombre = "Jugador3", Puntaje = 80 },
            new Jugador { Nombre = "Jugador4", Puntaje = 70 }
        };
        await ActualizarPuntajes();

    }

    private List<Jugador> Jugadores { get; set; }
    private async Task ActualizarPuntajes()
    {
        while (true)
        {
            await Task.Delay(100); // Esperamos 2 segundos

            // Actualizamos los puntajes de los jugadores
            foreach (var jugador in Jugadores)
            {
                jugador.Puntaje += new Random().Next(1, 11);
                if (jugador.Puntaje >= 1000) break;
            }

            // Actualizamos la interfaz de usuario
            StateHasChanged();
        }
    }

    // Definimos la clase Jugador
    public class Jugador
    {
        public string Nombre { get; set; } = "";
        public int Puntaje { get; set; }
    }
}