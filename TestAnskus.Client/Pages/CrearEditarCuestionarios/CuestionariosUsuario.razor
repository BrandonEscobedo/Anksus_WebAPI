    @page "/MisCuestionarios"
    @using System.Security.Claims
    @using anskus.Application.CuestionarioActivo
    @using anskus.Application.HubSignalr
    @inject ICuestionarioService cuestionarioService
    @inject NavigationManager _NavigationManager;
    @inject AuthenticationStateProvider AuthenticationStateProvider
    @inject ICuestionarioActivoService cuestionarioActivo
    @inject IHubconnectionService HubService
    @if (cuestionarios == null)
    {
        <h1> Cargando Cuestionarios...</h1>
    }
    else if (cuestionarios.Any())
    {
    @foreach(CuestionarioDTO cuestionario in cuestionarios)
        {    
        <div class="container d-flex justify-content-center">
            <div class="card mx-auto" style="width: 30rem;">
                 <img src="..." class="card-img-top" alt="...">
                  <div class="card-body">
                <h5 class="card-title">Titulo del cuestionario: @cuestionario.Titulo</h5>
                <p class="card-text">Cantidad de preguntas: 10</p>
                <a href="#" class="card-link"><i class="fas fa-pencil-alt"></i></a>
                <a href="#" class="card-link"><i class="fas fa-trash-alt"></i></a>
                        <a href="#" @onclick="async()=> await IniciarCuestionario(cuestionario.IdCuestionario)" class="btn btn-success">Comenzar</a>
                        <a @onclick=" ()=>  EditarCuestionario(cuestionario.IdCuestionario)" class="btn btn-secondary">Editar</a>
                 </div>
             </div>
        </div>

        }
    }
    else
    {
       <h1>Aun no tienes cuestionarios</h1>
        <a href="CrearCuestionario">Crear cuestionarios</a>
    }
    @code {
        List<CuestionarioDTO>? cuestionarios;
        string useremail = "";
        protected override async Task OnInitializedAsync()
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState?.User;

            if (user?.Identity?.IsAuthenticated ?? false)
            {
                useremail = user?.FindFirst(ClaimTypes.Email)?.Value;
                if(useremail!=null)
                 cuestionarios = await cuestionarioService.GetAllCuestionarios(useremail);

            }

        }
        private void  EditarCuestionario(int idcuestionario)
        {
      
        _NavigationManager.NavigateTo($"/EditarCuestionario/{idcuestionario}");
        }
        private async Task IniciarCuestionario(int id )
        {
            var result = await cuestionarioActivo.ActivarCuestionario(id);
            if (result !=null)
            {
                await HubService.NewRom(result);
            }
        }
    }
