@page "/EditarCuestionario/"
@inject anskus.Application.Preguntas.IPreguntasService _preguntasService
@inject IDialogService DialogService
@inject IRespuestasServices respuestasService
@inject anskus.Application.Cuestionarios.IIdContainer _IdConteiner
<MudButton @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
    Guardar Cuestionario
</MudButton>
<div class="container-fluid m-0">
    <div class="row">
        <div class="col-md-2 bg-white custom-left-section p-3">
            <ul id="questionList" class="list-group">
                @foreach (var pregunta in cuestionario.Pregunta)
                {
                    <input type="button" class="form-control" @bind-value="pregunta.pregunta" />
                    <button @onclick="() => EliminarPregunta(pregunta)">Eliminar</button>
                }
            </ul>
            <div class="mt-3">
                <div class="mt-3">
                    <button id="addFunctionButton" @onclick="GuardarEditarPregunta" class="btn btn-primary mt-2">Agregar Pregunta</button>
                </div>
            </div>
        </div>
        <div class="col-md-10 bg-white p-4">
            <h3>Escribe la pregunta</h3>
            <input type="text" @bind-value="preguntasDTO.pregunta" class="form-control" placeholder="pregunta">
            @foreach (var pregunta in cuestionario.Pregunta)
            {
                @foreach (var respuestas in pregunta?.Respuesta.Where(x => x.IdPregunta == _IdConteiner.idPregunta))
                {
                    <div class="col-6">
                        <div class="input-group">
                            <input type="text" @bind-value="respuestas.respuesta" class="form-control"
                                   placeholder="Agrega tu respuesta">
                            <input id="eye1" type="checkbox" @bind-value="respuestas.RCorrecta" class="form-check-input" />
                            <button class="btn-danger" @onclick="() => EliminarRespuesta(respuestas)">Eliminar</button>
                        </div>
                    </div>
                }
            }
            <button class="add-options mt-3 btn btn-success" @onclick="AgregarRespuesta">
                Agregar más opciones
            </button>
        </div>
    </div>
</div>

@code{
    public int id = 0;
    [Parameter]
    public CuestionarioDTO cuestionario { get; set; } = new();
    List<PreguntasDTO> ListaPreguntas { get; set; } = new();
    List<RespuestasDTO> ListaRespuestasDTOs { get; set; } = new List<RespuestasDTO>();
    public PreguntasDTO preguntasDTO { get; set; } = new PreguntasDTO();
    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<MdCrearCuestionario>("Simple Dialog", options);
    }
    protected override async Task OnInitializedAsync()
    {
        _IdConteiner.idCuestionario = id;
        ListaRespuestasDTOs.Add(new RespuestasDTO
            {
                IdPregunta = 0,
                respuesta = "",
                RCorrecta = false
            });
    }

    public async Task GuardarEditarPregunta()
    {
        var nuevapregunta = new PreguntasDTO()
            {
                IdCuestionario = _IdConteiner.idCuestionario,
                pregunta = preguntasDTO.pregunta
            };
        preguntasDTO.IdCuestionario = _IdConteiner.idCuestionario;
        var idpreg = await _preguntasService.Add(nuevapregunta);
        if (idpreg != 0)
        {
            _IdConteiner.SetIdPregunta(idpreg);
            nuevapregunta.IdPregunta = idpreg;
            ListaPreguntas.Add(nuevapregunta);
            await GuardarRespuestas();
            await CleanRespuestas();
        }
    }
    public void EliminarRespuesta(RespuestasDTO respuesta)
    {
        ListaRespuestasDTOs.Remove(respuesta);
    }
    public async Task EliminarPregunta(PreguntasDTO pregunta)
    {
        var result = await _preguntasService.DeletePregunta(pregunta.IdPregunta);
        if (result)
        {
            ListaPreguntas.Remove(pregunta);
        }

    }
    public async Task AgregarRespuesta()
    {
        ListaRespuestasDTOs.Add(new RespuestasDTO
            {
                IdPregunta = 0,
                respuesta = "",
                RCorrecta = false
            });
    }
    public async Task CleanRespuestas()
    {
        ListaRespuestasDTOs.Clear();
        ListaRespuestasDTOs.Add(new RespuestasDTO
            {
                IdPregunta = 0,
                respuesta = "",
                RCorrecta = false
            });

    }
    public async Task CambiarID(int id)
    {
        foreach (var respuesta in ListaRespuestasDTOs)
        {
            respuesta.IdPregunta = id;
        }
    }
    public async Task GuardarRespuestas()
    {
        await CambiarID(_IdConteiner.idPregunta);
        ListaRespuestasDTOs.RemoveAll(r => r.respuesta.Length == 0);
        await respuestasService.Add(ListaRespuestasDTOs);
    }

                            }