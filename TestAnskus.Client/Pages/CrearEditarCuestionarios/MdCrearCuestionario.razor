@inject ICuestionarioService _CuestionarioService
@inject IDialogService DialogService
@inject IIdContainer IdContainer
@using System.Security.Claims
@using anskus.Application.Cuestionarios
<MudDialog>
<DialogContent>
    <MudInputLabel>Titulo</MudInputLabel>
    <input type="text" @bind-value="cuestionarioDTO.Titulo" />
@*     <MudSelect @bind-Value="cuestionarioDTO.IdCategoria" Label="Categoria">
@foreach (var item in listaCategorias)
{
    <MudSelectItem Value="@item.IdCategoria">@item.Categoria</MudSelectItem>
}
</MudSelect> *@
</DialogContent>
<DialogActions>
    <MudButton OnClick="Cancel">Cancel</MudButton>
    <MudButton Color="Color.Primary" OnClick="GuardarEditarCuestionario">Ok</MudButton>
</DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    void Cancel() => MudDialog.Cancel();
    [Inject] AuthenticationStateProvider? AuthStateProvider { get; set; }


    public CuestionarioDTO cuestionarioDTO { get; set; } = new CuestionarioDTO();
    public List<CategoriasDTO> listaCategorias = new List<CategoriasDTO>();
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider?.GetAuthenticationStateAsync()!;
        var user = authState.User;

        if (user.Identity!.IsAuthenticated)
        {
            cuestionarioDTO.Email = user.FindFirst(ClaimTypes.Email)?.Value;

        }
        // listaCategorias = await _CategoriasService.GetAllCategorias();
    }
    public async Task GuardarEditarCuestionario()
    {

        await _CuestionarioService.Add(cuestionarioDTO);
        IdContainer.SetIdCuestionario();
    }
}
